// Controles de √°udio
const themeAudio = document.getElementById('theme-audio');
const playBtn = document.getElementById('play-audio');
const pauseBtn = document.getElementById('pause-audio');

playBtn.addEventListener('click', () => {
  themeAudio.play();
});

pauseBtn.addEventListener('click', () => {
  themeAudio.pause();
});

// Elementos principais
const calculateBtn = document.getElementById('calculate-btn');
const returnBtn = document.getElementById('return-btn');
const numberInput = document.getElementById('number-input');
const resultContent = document.getElementById('result-content');

// Fun√ß√£o para verificar se um n√∫mero √© primo
function isPrime(num) {
  if (num < 2) return false;
  if (num === 2) return true;
  if (num % 2 === 0) return false;

  for (let i = 3; i <= Math.sqrt(num); i += 2) {
    if (num % i === 0) return false;
  }
  return true;
}

// Fun√ß√£o para encontrar todos os n√∫meros primos em um array
function findPrimes(arr) {
  return arr.filter(num => isPrime(num));
}

// Fun√ß√£o para encontrar n√∫meros n√£o primos
function findNonPrimes(arr) {
  return arr.filter(num => !isPrime(num));
}

// Fun√ß√£o para encontrar a maior subsequ√™ncia crescente
function findLongestIncreasingSubsequence(arr) {
  if (arr.length === 0) return [];

  let longestSequence = [];
  let currentSequence = [arr[0]];

  for (let i = 1; i < arr.length; i++) {
    if (arr[i] > currentSequence[currentSequence.length - 1]) {
      currentSequence.push(arr[i]);
    } else {
      if (currentSequence.length > longestSequence.length) {
        longestSequence = [...currentSequence];
      }
      currentSequence = [arr[i]];
    }
  }

  if (currentSequence.length > longestSequence.length) {
    longestSequence = [...currentSequence];
  }

  return longestSequence;
}

// Fun√ß√£o para exibir o resultado
function displayResult(numbers) {
  // Encontrar n√∫meros primos
  const primes = findPrimes(numbers);

  // Calcular soma dos primos
  const sumOfPrimes = primes.reduce((acc, num) => acc + num, 0);

  // Verificar se a soma √© prima
  const isSumPrime = isPrime(sumOfPrimes);

  // Encontrar n√£o primos
  const nonPrimes = findNonPrimes(numbers);

  // Encontrar maior subsequ√™ncia crescente de n√£o primos
  const longestSequence = findLongestIncreasingSubsequence(nonPrimes);

  // Construir HTML do resultado
  let resultHTML = '';

  // Entrada original
  resultHTML += `
        <div class="result-item">
            <div class="result-title">üìä ENTRADA DE DADOS:</div>
            <div class="result-value">[${numbers.join(', ')}]</div>
        </div>
    `;

  // N√∫meros primos encontrados
  resultHTML += `
        <div class="result-item">
            <div class="result-title">üî¢ N√öMEROS PRIMOS IDENTIFICADOS:</div>
            <div class="result-value">[${primes.length > 0 ? primes.join(', ') : 'Nenhum'}]</div>
            <div class="result-detail">Total: ${primes.length} n√∫mero(s) primo(s)</div>
        </div>
    `;

  // C√°lculo da soma
  if (primes.length > 0) {
    resultHTML += `
            <div class="result-item">
                <div class="result-title">‚ûï SOMA DOS PRIMOS:</div>
                <div class="result-value">${primes.join(' + ')} = ${sumOfPrimes}</div>
                <div class="result-detail">C√°lculo: Adi√ß√£o de todos os n√∫meros primos identificados</div>
            </div>
        `;

    // Verifica√ß√£o se a soma √© prima
    resultHTML += `
            <div class="result-item">
                <div class="result-title">üîç VERIFICA√á√ÉO DA SOMA (${sumOfPrimes}):</div>
                <div class="result-value">${
                  isSumPrime ? '‚úÖ A soma √â um n√∫mero primo!' : '‚ùå A soma N√ÉO √© um n√∫mero primo'
                }</div>
                <div class="result-detail">
                    ${
                      isSumPrime
                        ? 'Coordenadas para a sala do tesouro DESBLOQUEADAS!'
                        : 'Acesso √† sala do tesouro NEGADO. Continue procurando...'
                    }
                </div>
            </div>
        `;
  } else {
    resultHTML += `
            <div class="result-item">
                <div class="result-title">‚ö†Ô∏è AVISO:</div>
                <div class="result-value">Nenhum n√∫mero primo encontrado na entrada</div>
            </div>
        `;
  }

  // N√∫meros n√£o primos
  resultHTML += `
        <div class="result-item">
            <div class="result-title">üîì N√öMEROS N√ÉO PRIMOS:</div>
            <div class="result-value">[${nonPrimes.length > 0 ? nonPrimes.join(', ') : 'Nenhum'}]</div>
            <div class="result-detail">Utilizados para c√°lculo do escudo extra</div>
        </div>
    `;

  // Maior subsequ√™ncia crescente
  resultHTML += `
        <div class="result-item">
            <div class="result-title">üìà MAIOR SUBSEQU√äNCIA CRESCENTE (N√ÉO PRIMOS):</div>
            <div class="result-value">[${longestSequence.length > 0 ? longestSequence.join(', ') : 'Nenhuma'}]</div>
            <div class="result-detail">
                ${
                  longestSequence.length > 0
                    ? `Sequ√™ncia de ${longestSequence.length} elemento(s) - Escudo extra ${
                        longestSequence.length >= 2 ? 'ATIVADO' : 'INSUFICIENTE'
                      }`
                    : 'Nenhuma sequ√™ncia crescente encontrada'
                }
            </div>
        </div>
    `;

  // Resultado final
  const finalStatus =
    isSumPrime && longestSequence.length >= 2
      ? 'üéØ ACESSO TOTAL CONCEDIDO! Tesouro e escudo desbloqueados!'
      : isSumPrime
      ? '‚ö†Ô∏è ACESSO PARCIAL - Tesouro desbloqueado, mas escudo insuficiente'
      : longestSequence.length >= 2
      ? '‚ö†Ô∏è ACESSO PARCIAL - Escudo ativado, mas tesouro bloqueado'
      : 'üö´ ACESSO NEGADO - Continue tentando...';

  resultHTML += `
        <div class="final-result">
            <div class="final-result-text">${finalStatus}</div>
        </div>
    `;

  resultContent.innerHTML = resultHTML;
}

// Evento do bot√£o CALCULAR
calculateBtn.addEventListener('click', () => {
  const input = numberInput.value.trim();

  if (!input) {
    resultContent.innerHTML =
      '<p class="error-message">‚ö†Ô∏è ERRO: Entrada de dados vazia. Por favor, insira n√∫meros.</p>';
    return;
  }

  try {
    // Converter entrada em array de n√∫meros
    const numbers = input.split(',').map(str => {
      const num = parseInt(str.trim());
      if (isNaN(num)) {
        throw new Error('Entrada inv√°lida');
      }
      return num;
    });

    if (numbers.length === 0) {
      throw new Error('Nenhum n√∫mero v√°lido encontrado');
    }

    displayResult(numbers);
  } catch (error) {
    resultContent.innerHTML =
      '<p class="error-message">‚ö†Ô∏è ERRO: Formato de entrada inv√°lido. Use n√∫meros separados por v√≠rgula (ex: 2, 3, 4, 5).</p>';
  }
});

// Evento do bot√£o RETORNAR
returnBtn.addEventListener('click', () => {
  numberInput.value = '';
  resultContent.innerHTML = '<p class="waiting-message">Aguardando entrada de dados...</p>';
});

// Permitir pressionar Enter para calcular
numberInput.addEventListener('keypress', e => {
  if (e.key === 'Enter') {
    calculateBtn.click();
  }
});
